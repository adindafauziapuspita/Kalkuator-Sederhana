/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'application'
    id 'jacoco'  // Plugin JaCoCo untuk mengukur code coverage
}

// Konfigurasi dasar JaCoCo
jacoco {
    toolVersion = "0.8.13"  // Versi JaCoCo yang digunakan
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')  // Direktori untuk menyimpan laporan JaCoCo
}

// Konfigurasi repositories untuk mengunduh dependensi
repositories {
    mavenCentral()  // Gunakan Maven Central Repository
}

test {
    useJUnitPlatform() // Menggunakan platform JUnit untuk menjalankan test
    finalizedBy jacocoTestReport // Laporan JaCoCo akan selalu dibuat setelah tes dijalankan
    
    // Konfigurasi agen JaCoCo
    jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/test.exec').get().asFile  // File tempat data eksekusi JaCoCo disimpan
        includeNoLocationClasses = false  // Jangan sertakan kelas tanpa informasi lokasi
    }
}

jacocoTestReport {
    dependsOn test // Tes harus dijalankan sebelum laporan dibuat
}

dependencies {
    implementation libs.guava
    
    // Dependensi JUnit untuk pengujian
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.9.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.kalkulator.Main'
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = false  // Menghasilkan laporan dalam format XML (dapat digunakan untuk integrasi dengan alat lain)
        csv.required = false  // Tidak menghasilkan laporan dalam format CSV
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/html')  // Lokasi output laporan HTML
    }
}

tasks.test {
    useJUnitPlatform()  // Gunakan JUnit 5 platform untuk unit testing
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5  // Minimum code coverage yang diharapkan (50%)
            }
        }

        rule {
            enabled = false  // Aturan ini dinonaktifkan
            element = 'CLASS'  // Berlaku untuk tingkat kelas
            includes = ['org.gradle.*']  // Hanya berlaku untuk kelas dalam paket org.gradle.*

            limit {
                counter = 'LINE'  // Menghitung jumlah baris
                value = 'TOTALCOUNT'  // Nilai yang digunakan adalah total hitungan
                maximum = 0.3  // Batas maksimum (30%)
            }
        }
    }
}